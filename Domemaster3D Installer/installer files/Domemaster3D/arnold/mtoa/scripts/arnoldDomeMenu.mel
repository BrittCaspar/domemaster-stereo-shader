/*
Create the Arnold Domemaster3D Main Menu in the Rendering menu set
Version 2.1
2016-09-17 Maya 2011+
------------------------------------------------------------------------------

Notes:
gMainRenderMenu
gMainCreateMenu
Create->Cameras

// Find a menu bar command
findMenuItem;

// List menu sets:
string $menuSets[] = `menuSet -allMenuSets`;
//Result: commonMenuSet animationMenuSet polygonsMenuSet surfacesMenuSet dynamicsMenuSet renderingMenuSet nDynamicsMenuSet 
 
// Remove old menu
deleteUI mainArnoldDomemaster3DMenu;

// Load the menus using:
source "arnoldDomeMenu.mel";
createArnoldDomemaster3DMenu();

*/


// Check what Maya version is active:
// Example: int $mayaVersion = getMayaVersionDome();
global proc int getMayaVersionDome(){
  // Check if we are running Maya 2011 or higher
  float $mayaVersion = `getApplicationVersionAsFloat`;

  // Test this GUI using the Maya 2010 - non-docked GUI mode
  //float $mayaVersion = 2010;

  // Write out the current Maya version number
  //print("Maya " + $mayaVersion + " detected.\n");

  return $mayaVersion;
}

  
// Check the operating system:
// Example: string $mayaPlatform = getMayaPlatform();
global proc string getMayaPlatform(){
  //-------------------------------------------------
  // Get the current Maya Platform using python
  //      The $mayaPlatform options are:
  //          "windows", "darwin", "linux"
  //-------------------------------------------------

  string $mayaPlatform = "";
  python("import sys");

  if(python("sys.platform == 'win32'")){
    $mayaPlatform = "windows";
  }else if(python("sys.platform == 'windows'")){
    $mayaPlatform = "windows";
  }else if(python("sys.platform == 'darwin'")){
    $mayaPlatform = "darwin";
  }else{
    $mayaPlatform = "linux";
  }

  //print("Running on " + $mayaPlatform + ".\n");
  return $mayaPlatform;
}


// Create the "Choose a Default Stereo Rig" submenu
global proc createArnoldDomeRigSubmenu(){
	popupMenu -edit -deleteAllItems arnoldDomeDefaultRigMenu;
  setParent -menu arnoldDomeDefaultRigMenu;
  
  // Remove any existing submenus
  // if (`menu -query -exists arnoldDomeDefaultRigMenu`){
    // print("Replacing the existing arnoldDomeDefaultRigMenu item.\n");
    // deleteUI arnoldDomeDefaultRigMenu;
  // }
  
  // Remove any existing radio submenu collections
  if(`menu -query -exists arnoldDomeRigSubMenuCollection`){
    print("Replacing the existing arnoldDomeRigSubMenuCollection item.\n");
    deleteUI arnoldDomeRigSubMenuCollection;
  }

  radioMenuItemCollection	arnoldDomeRigSubMenuCollection;
  
  // Create a sub menu using the list of active stereoRigManager rigs
  int $i = 0;
  global string $arnoldDomeActiveRig;
  string $rigs[] = `stereoRigManager -listRigs`;
  string $defaultRig =  `stereoRigManager -query -defaultRig`;  
  string $funcName = "";
  int $isCurrent;
  
  for($arnoldDomeActiveRig in $rigs){
    // Check if this is the default rig
    
    if($defaultRig == $arnoldDomeActiveRig){
      $isCurrent = true;
    }else{
      $isCurrent = false;
    }
    
    print("Camera Rig: " + $arnoldDomeActiveRig + " Default: " + $isCurrent + "\n");
    
    // Build the radio button item's command string
    $funcName = "";
    $funcName += "print(\"Changing the default stereo rig to: " + $arnoldDomeActiveRig + "\\n\");";
    $funcName += "stereoRigManager -defaultRig " + $arnoldDomeActiveRig + ";";

    // Build the radio button menu item
    menuItem 
        -label $arnoldDomeActiveRig
        -radioButton ($isCurrent)
        -collection arnoldDomeRigSubMenuCollection
        -parent arnoldDomeDefaultRigMenu
        -command $funcName
        ("domeRadioSubMenu" + $i);
        
     $i += 1;
  }
  
  setParent -menu ArnoldDomeCamerasMenu;  
}


global proc editArnoldDomeDiagOpenMenuItems(){
  // Get the current project folder name
  string $projPath = `workspace -q -rootDirectory`;
  
  // Build the images directory path
  string $imageWorkspace = `workspace -query -fileRuleEntry "images"`;
  string $imagesPath = `workspace -expandName $imageWorkspace`;

  // Build the scene directory path
  string $scenesWorkspace = `workspace -query -fileRuleEntry "scene"`;
	string $scenesPath = `workspace -expandName $scenesWorkspace`;

  menuItem -edit 
    -annotation ("Show the \"Scenes\" directory for the current project: " + $scenesPath)
    ArnoldDomeDiagOpenScenesMenu;

  menuItem -edit 
    -annotation ("Show the \"Images\" directory for the current project: " + $imagesPath)
    ArnoldDomeDiagOpenImagesMenu;
}

// Run the menu update command
// editArnoldDomeDiagOpenMenuItems();

// -----------------------------------------------------------------
// Create the Arnold Domemaster3D Menu
// -----------------------------------------------------------------
global proc createArnoldDomemaster3DMenu() {
  global string $gMainWindow;
  
  // Check the active maya version
	int $mayaVersion = getMayaVersionDome();

  // Remove any existing Arnold Domemaster3D menus
  if(`menu -query -exists mainArnoldDomemaster3DMenu`){
    print("Replacing the existing Arnold Domemaster3D menu item.\n");
    deleteUI mainArnoldDomemaster3DMenu;
  }
  
  // Create the Arnold Domemaster3D Menu
  // The postMenuCommand will run the function editArnoldDomeDiagOpenMenuItems() that refreshes the Open Scenes and Open Images menu items.
  setParent $gMainWindow;
  menu -label "Arnold Domemaster3D" 
    -tearOff true 
    -postMenuCommand "editArnoldDomeDiagOpenMenuItems();"
    mainArnoldDomemaster3DMenu;

  menuSet -currentMenuSet 
    renderingMenuSet;
  
  menuSet -addMenu 
    mainArnoldDomemaster3DMenu 
    renderingMenuSet;

  updateMenuMode;
  updateMenuModeUI;
  
  setParent -menu 
    mainArnoldDomemaster3DMenu;
  
  menuItem
    -subMenu true 
    -tearOff true 
    -label "Dome Cameras" 
    ArnoldDomeCamerasMenu;
    
      // VR 2D Section
      if($mayaVersion >= 2015){
        menuItem -divider true -dividerLabel "VR 2D";
      //}else{
      //  menuItem -divider true;
      }
      
      menuItem
        -label "LatLong Camera" 
        -annotation "Create a 2D LatLong / Equirectangular / Spherical camera.  This option uses the LatLong Stereo shader applied in a 2D center camera viewing mode."
        -image "renderArnold_LatLong.png"
        -sourceType "python"
        -command "import arnoldDomeCamera\nreload(arnoldDomeCamera)\narnoldDomeCamera.createArnoldLatLong_Camera()";
    
      // VR Stereo Section
      if($mayaVersion >= 2015){
        menuItem -divider true -dividerLabel "VR Stereo";
      //}else{
      //  menuItem -divider true;
      }
    
      menuItem
        -label "LatLong Stereo Camera" 
        -annotation "Create a stereoscopic LatLong / Equirectangular / Spherical camera with the LatLong Stereo shader applied."
        -image "renderArnold_latlongStereo.png"
        -sourceType "python"
        -command "import arnoldDomeCamera\nreload(arnoldDomeCamera)\narnoldDomeCamera.createArnoldLatLongStereoRig()"; 
     
      /*
       
      menuItem
        -label "LatLong Stereo Aim Camera" 
        -annotation "Create a stereoscopic LatLong / Equirectangular / Spherical camera with an aim constraint and the LatLong_Stereo shader applied."
        -image "renderArnold_latlongStereo.png"
        -sourceType "python"
        -command "import domeCamera\nreload(domeCamera)\ndomeCamera.createLatLongStereoAimRig()"; 
      menuItem
        -label "LatLong Stereo Zenith Camera" 
        -annotation "Create a stereoscopic LatLong / Equirectangular / Spherical camera in an upwards facing orientation with the LatLong_Stereo shader applied and \"Zenith Mode\" enabled."
        -image "renderArnold_latlongStereo.png"
        -sourceType "python"
        -command "import domeCamera\nreload(domeCamera)\ndomeCamera.createLatLongStereoZenithRig()";
      */
           
      // Fulldome 2D Section
      if($mayaVersion >= 2015){
        menuItem -divider true -dividerLabel "Fulldome 2D";
      }else{
        menuItem -divider true;
      }
      
      menuItem
        -label "Domemaster FOV Camera" 
        -annotation "Create a fulldome camera with a 2D FOV style Domemaster lens shader applied. This option uses the DomemasterStereo shader in a 2D center camera viewing mode."
        -image "renderArnold_domemasterWxH.png"
        -sourceType "python"
        -command "import arnoldDomeCamera\nreload(arnoldDomeCamera)\narnoldDomeCamera.createArnoldDomemasterFOV_Camera()";

      menuItem
        -label "Domemaster WxH Camera" 
        -annotation "Create a fulldome camera with the Domemaster WxH lens shader applied. This shader uses a diameter and height setting instead of a field of view control."
        -image "renderArnold_domemasterWxH.png"
        -sourceType "python"
        -command "import arnoldDomeCamera\nreload(arnoldDomeCamera)\narnoldDomeCamera.createArnoldDomemasterWxH_Camera()";

      // Fulldome Stereo Section
      if($mayaVersion >= 2015){
        menuItem -divider true -dividerLabel "Fulldome Stereo";
      }else{
        menuItem -divider true;
      }

      menuItem 
        -label "Domemaster Stereo Camera" 
        -annotation "Create a stereo fulldome camera rig."
        -image "renderArnold_domemasterStereo.png" 
        -sourceType "python"
        -command "import arnoldDomeCamera\nreload(arnoldDomeCamera)\narnoldDomeCamera.createArnoldFulldomeStereoRig()";
      
      /*
      menuItem 
        -label "Dome Texture" 
        -annotation "Create a screen space file texture. This is useful for loading file textures as control maps for the domeAFL_FOV_Stereo shader." 
        -image "render_rob_lookup_background.png"
        -sourceType "python"
        -command "import domeCamera\nreload(domeCamera)\ndomeCamera.createRobLookup()";
      menuItem 
        -label "Dome Ramp" 
        -annotation "Create a screen space ramp texture. This is useful for creating editable gradients that can be used to drive the control maps on the domeAFL_FOV_Stereo."
        -image "domeArnold_ramp.png"
        -sourceType "python"
        -command "import domeCamera\nreload(domeCamera)\ndomeCamera.createDomeRampTexture()";
*/
      
      menuItem -divider true;
      
      // Check if we are running Maya 2011 or higher
      if($mayaVersion >= 2011){
        menuItem 
          -subMenu true 
          -tearOff true 
          -label "Choose a Default Stereo Rig"
          -annotation "Set the active / default stereo camera rig."
          -postMenuCommand "createArnoldDomeRigSubmenu()"
          arnoldDomeDefaultRigMenu;      
          
        setParent -menu ..;   
      } // End of 2011+ check
    
    setParent -menu ..;
    
  // Fulldome Tools Section
  if($mayaVersion >= 2015){
    menuItem -divider true -dividerLabel "Fulldome Tools";
  }else{
    menuItem -divider true;
  }
  
  menuItem 
    -label "Create Reference Grid" 
    -annotation "Create a hemispherical wireframe reference grid."
    -image "domeArnold_grid.png"
    -sourceType "python"
    -command "import arnoldDomeCamera\nreload(arnoldDomeCamera)\narnoldDomeCamera.createDomeGrid()";
  
/*
  menuItem 
    -label "Create Galaxy" 
    -annotation "Create dynamic particle based galaxies."
    -image "render_galaxy.png" 
    -command "source \"galaxyCreator.mel\";galaxyCreator();";
  menuItem 
    -label "Create DomeText" 
    -annotation "Create raster titles and scrolling credits using ImageMagick."
    -image "domeText.png" 
    -command "source \"domeText.mel\";domeText();";
  menuItem 
    -label "Dome Viewer" 
    -annotation "View immersive fulldome and panoramic images+movies in Maya."
    -image "domeViewer.png" 
    -command "source \"domeViewer.mel\";domeViewer();";

*/


  // Diagnostics Section
  if($mayaVersion >= 2015){
    menuItem -divider true -dividerLabel "Open Directories";
  }else{
    menuItem -divider true;
  }

  // Open the Maya render log
  string $renderLogName = "";
  string $domeMayaRenderLogPathString;
  string $domeUserHomePathString;

  if(getMayaPlatform() == "windows"){
    // Windows Log Filename
    $renderLogName = "mayaRenderLog.txt";
    // Win Example:  C:/Users/hazelden
    $domeUserHomePathString = `getenv "USERPROFILE"`;
    $domeMayaRenderLogPathString = `getenv "MAYA_APP_DIR"` + "/mayaRenderLog.txt";
  }else if(getMayaPlatform() == "darwin") {
    // Mac OS X Log Filename
    $renderLogName = "mayaRender.log";
    // Mac Example: $Home = /Users/hazelden
    $domeUserHomePathString = `getenv "HOME"`;
    $domeMayaRenderLogPathString = $domeUserHomePathString + "/Library/Logs/Maya" + "/mayaRender.log";
  }else{
    // Linux Log Filename
    $renderLogName = "mayaRender.log";
    // Linux Example: $Home = /home/hazelden
    $domeUserHomePathString = `getenv "HOME"`;
    $domeMayaRenderLogPathString = $domeUserHomePathString + "/maya" + "/mayaRenderLog.txt";
  }

  // Get the current project folder name
  string $projPath = `workspace -q -rootDirectory`;
  
  // Build the images directory path
  string $imageWorkspace = `workspace -query -fileRuleEntry "images"`;
  string $imagesPath = `workspace -expandName $imageWorkspace`;

  // Build the scene directory path
  string $scenesWorkspace = `workspace -query -fileRuleEntry "scene"`;
	string $scenesPath = `workspace -expandName $scenesWorkspace`;
	
  menuItem 
    -label "Show Maya Project Directory"
    //-annotation ("Opening the directory for the current project: " + $sceneprojPathsPath)
    -annotation "Show the current Maya project directory."
    -imageOverlayLabel "PROJ"
    -image "domeArnold_directory.png"
    -command "source \"domeDiagnostics.mel\";\ndomeOpenProjectDirectory();" 
    ArnoldDomeDiagOpenProjectsMenu;
  menuItem 
    -label "Show Scenes Directory"
    //-annotation ("Opening the \"Scenes\" directory for the current project: " + $scenesPath)
    -annotation "Show the \"Scenes\" directory for the current project."
    -imageOverlayLabel "SCN"
    -image "domeArnold_directory.png"
    -command "source \"domeDiagnostics.mel\";\ndomeOpenSceneDirectory();" 
    ArnoldDomeDiagOpenScenesMenu;
  menuItem 
    -label "Show Sourceimages Directory"
    //-annotation ("Show the \"Sourceimages\" directory for the current project: " + $imagesPath)
    -annotation "Show the \"Sourceimages\" directory for the current project."
    -imageOverlayLabel "SRC"
    -image "domeArnold_directory.png"
    -command "source \"domeDiagnostics.mel\";\ndomeOpenSourceImagesDirectory();" 
    ArnoldDomeDiagOpenSourceImagesMenu;
  menuItem 
    -label "Show Images Directory"
    -annotation "Show the \"Images\" directory for the current project."
    -imageOverlayLabel "IMG"
    -image "domeArnold_directory.png"
    -command "source \"domeDiagnostics.mel\";\ndomeOpenImagesDirectory();" 
    ArnoldDomeDiagOpenImagesMenu;
  menuItem 
    -label "Show TEMP Directory"
    -annotation "Show the temporary directory."
    -imageOverlayLabel "TMP"
    -image "domeArnold_directory.png"
    -command "source \"domeDiagnostics.mel\";\ndomeOpenTempDirectory();";
    
  // Diagnostics Section
  if($mayaVersion >= 2015){
    menuItem -divider true -dividerLabel "Diagnostics";
  }else{
    menuItem -divider true;
  }

  menuItem 
    -label "Open the Maya Render Log"
    -annotation ("Opening the Maya Render Log file: " + $domeMayaRenderLogPathString)
    -imageOverlayLabel "rLog"
    -image "domeArnold_log.png"
    -command "source \"domeDiagnostics.mel\";\ndomeOpenMayaRenderLogFile();" ;
  menuItem 
    -label "Create Diagnostics Report" 
    -annotation "Generate a Maya Diagnostics Report and save it to your desktop."
    -imageOverlayLabel "DIAG"
    -image "domeArnold_log.png"
    -command "source \"domeDiagnostics.mel\";\ndomeDiagnostics();";
  menuItem
    -label "Open Task Manager" 
    -annotation "Open the Task Manager on Windows, or the Activity Monitor on Mac OS X."
    -imageOverlayLabel "Task"
    -image "domeArnold_task.png"
    -command "source \"domeDiagnostics.mel\";\nopenTaskManager();";
    
    /*
  menuItem 
    -label "Add Pre/Post Render Mel" 
    -annotation "Add the Domemaster3D shader Pre/Post render mel scripts to the Maya Render Settings window."
    -image "domeArnold_mayaScript.png" 
    -sourceType "python"
    -command "import domeCamera\nreload(domeCamera)\ndomeCamera.addPrePostRenderScript()";
  menuItem
    -label "Remove Pre/Post Render Mel" 
    -annotation "Remove the Domemaster3D shader Pre/Post render mel scripts from the Maya Render Settings window."
    -image "domeArnold_mayaScript.png" 
    -sourceType "python"
    -command "import domeCamera\nreload(domeCamera)\ndomeCamera.removePrePostRenderScript()";
    */
    
  menuItem
    -label "Launch Another Maya Instance" 
    -annotation "This tool will launch an additional copy of Maya that will run independently. This is handy if you want to work in two separate Maya sessions at the same time"
    -image "domeArnold_mayaScript.png" 
    -command "source \"domeDiagnostics.mel\"; domeLaunchMayaInstance();";
  menuItem 
    -label "Reload Arnold Plugin" 
    -annotation "Arnold to reload. This can fix issues if Maya didn't startup correctly."
    -image "domeArnold_load.png" 
    -sourceType "python"
    -command "import arnoldDomeCamera\nreload(arnoldDomeCamera)\narnoldDomeCamera.forceArnoldLoad()";

  // Support Section
  if($mayaVersion >= 2015){
    menuItem -divider true -dividerLabel "Support";
  }else{
    menuItem -divider true;
  }
  
  menuItem 
    -label "Load Domemaster3D Shelf" 
    -annotation "Load the Domemaster3D Shelf into Maya."
    -image "domeArnold_log.png" 
    -command "loadNewShelf(\"shelf_ArnoldDomemaster3D.mel\");";
  menuItem 
    -label "Domemaster3D Wiki Help" 
    -annotation "Load the Domemaster Stereo Shader Wiki page in your web browser."
    -image "domeArnold_help.png" 
    -sourceType "python"
    -command "import arnoldDomeCamera\nreload(arnoldDomeCamera)\narnoldDomeCamera.openDomemasterWiki()";
  menuItem 
    -label "Domemaster3D Version Info" 
    -annotation "Show the current version number for the Domemaster3D Shader and links to the download page, and the NING group."
    -image "domeArnold_info.png"
    -command "source \"arnoldDomeVersion.mel\";arnoldDomeVersion();";
} 

// Create the menu
// createArnoldDomemaster3DMenu();