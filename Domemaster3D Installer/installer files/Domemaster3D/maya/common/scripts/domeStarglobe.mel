/*
  Dome Starglobe GUI V2.1
  2016-12-29
  by Andrew Hazelden

  This is a Maya GUI for the starglobe tool.

  Version History
  ----------------
  
  Version 2.2.2
  ---------------
  2016-12-29
  
  Added Maya 2017 Workspace Control support to the Starglobe window
  
  Version 2.1
  -------------
  2016-08-02
  
  Version 1.7
  -------------
  2015-03-07 
  
  Version 1.6
  ---------------
  Oct 3, 2014
  
  Updated the sourceimages path code to allow the installation of the Domemaster3D shader to a folder other than the default path.
  
  Version 1.5 - July 6, 2014
  ------------------------------------
  Added a remapColor node to the Starglobe MR texture shading network so you can adjust the brightness of the stars

  Version 1.4 Beta 9 - Dec 6, 2013
  -------------------------------------
  Updated the window's dock controls so the docked vs floating, and docked left/right window settings are restored  

  Version 1.1 - Oct 27, 2013 Build 2
  -------------------------------------
  Updated the GUI for Maya 2010 compatibility

  Version 1 - Oct 6, 2013
  ---------------------------
  Initial GUI release

  To use the Dome Starglobe MEL script run the following MEL commands:
  print("Starglobe Tool");
  source "domeStarglobe.mel";
  createStarglobe();

*/

// Check what Maya version is active:
// Example: int $mayaVersion = getMayaVersionDome();
global proc int getMayaVersionDome(){
  // Check if we are running Maya 2011 or higher
  int $mayaVersion = `getApplicationVersionAsFloat`;

  // Test this GUI using the Maya 2010 - non-docked GUI mode
  //int $mayaVersion = 2010;

  // Write out the current Maya version number
  //print("Maya " + $mayaVersion + " detected.\n");

  return $mayaVersion;
}

  
// Check the operating system:
// Example: string $mayaPlatform = getMayaPlatform();
global proc string getMayaPlatform(){
  //-------------------------------------------------
  // Get the current Maya Platform using python
  //      The $mayaPlatform options are:
  //          "windows", "darwin", "linux"
  //-------------------------------------------------

  string $mayaPlatform = "";
  python("import sys");

  if(python("sys.platform == 'win32'")){
    $mayaPlatform = "windows";
  }else if(python("sys.platform == 'windows'")){
    $mayaPlatform = "windows";
  }else if(python("sys.platform == 'darwin'")){
    $mayaPlatform = "darwin";
  }else{
    $mayaPlatform = "linux";
  }

  //print("Running on " + $mayaPlatform + ".\n");
  return $mayaPlatform;
}


//Rebuild the cameras option menu
global proc buildCamerasMenu(){
  if(`optionMenuGrp -exists menuCameraSelect`){
    //print("Removing the existing cameras menu.\n");
    deleteUI menuCameraSelect;
  } else {
    //print("Create the Camera menu.\n");
  }

  // Create the Camera list options menu 
  optionMenuGrp
    -label "Attach to Camera"
    -columnAlign 1 "right"
    -annotation "Attach the starglobe to a camera using a point constraint."
    -parent starglobeCameraLayout
     menuCameraSelect;

  menuItem -label "Select a Camera...";

  //List all of the camera nodes
  string $cameraNodeList[] = `lsType("camera")`;
  string $cameraNodeItems = "";
  
  //Sort the camera node names alphabetically
  $cameraNodeList = sort($cameraNodeList);
  
  //print ("Nodes:\n");
  //print ($cameraNodeList);
    
  int $i = 0; //track the total number of camera nodes
  
  //Scan camera File Texture Nodes
  for ( $cameraNodeItems in $cameraNodeList )
  {
     // Look for the last item <done> in the array
     if ( $cameraNodeItems != "<done>" ){
       //print ( "camera [" + $i + "] " + $cameraNodeItems + "\n");
       //menuItem -label $cameraNodeItems;
       //List the camera's using the base transform node name
       menuItem -label `getObjectParentNode($cameraNodeItems)`;
     }
     $i = $i+1;
  }

  optionMenuGrp 
    -edit
    -select 1
    menuCameraSelect;
}




global proc SaveDockedStarglobeWindowPos(){
  //Save the Starglobe dockControl State

  string $dockedArea = `dockControl -query -area starglobeDockControl`;
  int $dockedFloating = `dockControl -query -floating starglobeDockControl`;

  //Save the dockControl window state - options: left,right
  optionVar -stringValue "starglobeDockControlArea" $dockedArea; 

  //Save the dockControl floating state - options: 0, 1
  optionVar -intValue "starglobeDockControlFloating" $dockedFloating;

  //DockControl Debug Info
  if($dockedFloating == 0){
    print("The Starglobe window is docked to the " + $dockedArea + " side.\n\n");
  } else {
    print("The Starglobe window is floating.\n\n");
  }
}



global proc createStarglobe(){
  global int $starglobeWindowWidth = 750;
  global int $starglobeWindowHeight = 300;
  
  string $scrollLayoutParent;
  
  //-------------------------------------------------
  // Get the current Maya Platform using python
  //      The $mayaPlatform options are:
  //          "windows", "darwin", "linux"
  //-------------------------------------------------
   //Check the operating system
  string $mayaPlatform = getMayaPlatform();

  // Check if we are running Maya 2011 or higher
  float $mayaVersion = getMayaVersionDome();

  // Write out the current Maya version number and detected operating system
  print("Maya " + $mayaVersion + " on " + $mayaPlatform + " detected.\n");

  // Clear out the old window contexts
  if($mayaVersion >= 2017){
    if(`workspaceControl -exists starglobeWorkspaceControl`){
      deleteUI starglobeWorkspaceControl;
      print( "Removing an existing Starglobe Workspace Control\n");
    }
  }else if($mayaVersion >=2011){
  // Remove an existing docked control window when running the Starglobe tool for a 2nd time.
    if (`dockControl -exists starglobeDockControl`){ 
      deleteUI -control starglobeDockControl; 
      print ("Removing an existing docked Starglobe Window\n");
      }

  if(`window -exists starglobeWin`){
      deleteUI starglobeWin;
      windowPref -remove starglobeWin;
      print("Reloading the Starglobe window elements\n");
      }

  }else{
    // You are running Maya 2010 or lower - skip the dockcontrols
    // Remove an existing window when running the Starglobe for a 2nd time.
    if(`window -exists starglobeWin`){
      deleteUI starglobeWin;
      //windowPref -remove starglobeWin;
      print("Reloading the Starglobe window elements\n");}
  }

  
  if($mayaVersion >= 2017){
    // Check where the AE/Channel Box/Layer Editor windows are docked
    string $attributeEditorDockWidget = getUIComponentDockControl("Attribute Editor", false);
    // string $channelLayerEditorDockWidget = getUIComponentDockControl("Channel Box / Layer Editor", false);
    // string $layerEditorComponent = getUIComponentDockControl("Layer Editor", false);
    
    // Important Note: The workspaceControl uiScript "if(`exists starglobeBuildPanel`){}" part avoids a possible Maya 2017 startup issue with the empty window context being re-created every time which causes an error to be logged in the first line of the Script Editor log. This exists check code is needed since starglobe isn't a .mll plugin which means the standard workspaceControl option of "-checksPlugins" is not available for use by the starglobe MEL script.
    
    // Create a new window
    workspaceControl
      -tabToControl $attributeEditorDockWidget -1
      //-tabToControl $channelLayerEditorDockWidget -1
      -label "Starglobe" 
      //-uiScript "if(`exists starglobeBuildPanel`){starglobeBuildPanel;}"
      -loadImmediately 1
      -initialWidth $starglobeWindowWidth
      -minimumWidth true
      -raise
      starglobeWorkspaceControl;
      
    $scrollLayoutParent = "starglobeWorkspaceControl";
  }else{
    string $starglobeWindow = `window 
      -title "Starglobe" 
      -widthHeight $starglobeWindowWidth $starglobeWindowHeight 
      starglobeWin`;
      
    $scrollLayoutParent = "starglobeWin";
  }
  
  string $starglobeScrollableLayout = `scrollLayout 
    -horizontalScrollBarThickness 18
     -verticalScrollBarThickness   18
     -childResizable 1
     -parent ($scrollLayoutParent)
     `;
   
    columnLayout
      -adjustableColumn true;

      columnLayout
       -adjustableColumn true
       starglobeCameraLayout;
        
        //Create the Camera option menu
        buildCamerasMenu();

      setParent ..; 

   columnLayout 
     -adjustableColumn true;
     
       rowLayout 
        -numberOfColumns 2
        -adjustableColumn 1
        -columnWidth2 450 50
        -columnAlign2 "left" "right";
        
       if ($mayaVersion >=2011){  
          text 
            -width 440
            //Note wordwrap is a Maya 2011+ feature
            -wordWrap true
            -label "The Starglobe tool creates a spherical night sky backdrop that surrounds the camera.\n\n The \"Attach to Camera\" popup menu allows you to point constrain the starglobe to a camera so the night sky feels infinite when the camera is animated in the scene.";
        } else {
          //Maya 2010 compatibility - no wordwrap available
          text 
            -width 440
            -label "The Starglobe tool creates a spherical night sky backdrop that surrounds the camera. \n\nThe \"Attach to Camera\" popup menu allows you to point constrain the starglobe to a \ncamera so the night sky feels infinite when the camera is animated in the scene.";
        }

        picture 
         -width 32
         -height 32
         -image "render_starglobe.xpm";
      
      setParent ..; 

    separator -style "none"; 
    
    checkBoxGrp
        -numberOfCheckBoxes 1
        -label1 "Create Starglobe mental ray materials"
        -value1 1
        -annotation "This control allows you to create the mental ray native starglobe surface materials. \nWhen disabled only Maya software renderer texturing nodes are used."
        checkGrpCreateStarglobeMentalRayMaterials;
        
    separator -style "none"; 
    
    button 
      -label "Create Starglobe" 
      -annotation "Create a new starglobe object."
      -command "doStarglobe()"; 

      setParent ..;
  setParent ..;
  
  //----------------------------------------------------------------------
  //Show the window
  //On Maya 2011 and higher provide access to the dockable UI 
  //----------------------------------------------------------------------

  string $dockedArea = "";
  int $dockedFloating = 0;

  //Load the dockControl Settings
  if($mayaVersion >= 2011){
    //Is the window docked to the left or right of the screen?
    if(`optionVar -exists "starglobeDockControlArea"`){
      $dockedArea = `optionVar -query "starglobeDockControlArea"`;
    }else{
      $dockedArea = "right";
    }

    //Is the window floating or not?
    if(`optionVar -exists "starglobeDockControlFloating"`){
      $dockedFloating = `optionVar -query "starglobeDockControlFloating"`;
    }else{
      $dockedFloating = 0;
    }
  }
  
  if($mayaVersion == 2011){
    //Make the maya 2011 or higher window dockable
    string $starglobeDockControl = `dockControl 
      -label "Starglobe"
			-area $dockedArea 
			// -area "right" //snap to the right side of the view next to the attribute editor
			//-area "left"     //snap to the left side of the view next to the tool settings tab
      -content starglobeWin
			-floating $dockedFloating
			//-floating 1 //floating window
			//-floating 0 //docked window
      -width $starglobeWindowWidth
      -height $starglobeWindowHeight
      //-allowedArea "all"
      -allowedArea "left"
      -allowedArea "right"
      -raise
      // Disabled for Maya 2011 compatibility testing
      //-floatChangeCommand "evalDeferred(\"dockControl -edit -width $starglobeWindowWidth starglobeDockControl;dockControl -edit -height $starglobeWindowHeight starglobeDockControl;SaveDockedStarglobeWindowPos();\")"
      starglobeDockControl`;
    
    //Force the window back to the right size
    evalDeferred("dockControl -edit -width $starglobeWindowWidth starglobeDockControl;dockControl -edit -height $starglobeWindowHeight starglobeDockControl;SaveDockedStarglobeWindowPos();");

    //Get the current window size
    print ("\nStarglobe Window Size: " 
              + `dockControl -q -width starglobeDockControl` 
              + " width " 
              + `dockControl -q -height starglobeDockControl` 
              + " height\n");
            
  }else if(($mayaVersion >= 2017)){
    // Maya 2017 uses a workspace control
    // Get the current window size
    print ("\nStarglobe Window Size: " 
              + `workspaceControl -query -width starglobeWorkspaceControl` 
              + " width " 
              + `workspaceControl -query -height starglobeWorkspaceControl` 
              + " height\n");
  }else if($mayaVersion >= 2012){
    //Make the maya 2012 or higher window dockable and add the floatChangeCommand option
    string $starglobeDockControl = `dockControl 
      -label "Starglobe"
			-area $dockedArea 
			// -area "right" //snap to the right side of the view next to the attribute editor
			//-area "left"     //snap to the left side of the view next to the tool settings tab
      -content starglobeWin
			-floating $dockedFloating
			//-floating 1 //floating window
			//-floating 0 //docked window
      -width $starglobeWindowWidth
      -height $starglobeWindowHeight
      //-allowedArea "all"
      -allowedArea "left"
      -allowedArea "right"
      -raise
      // Disabled in Maya 2011 for compatibility
      -floatChangeCommand "evalDeferred(\"dockControl -edit -width $starglobeWindowWidth starglobeDockControl;dockControl -edit -height $starglobeWindowHeight starglobeDockControl;dockControl -e -raise starglobeDockControl;SaveDockedStarglobeWindowPos();\")"
      starglobeDockControl`;
  
    //Force the window back to the right size
    evalDeferred("dockControl -edit -width $starglobeWindowWidth starglobeDockControl;dockControl -edit -height $starglobeWindowHeight starglobeDockControl;dockControl -e -raise starglobeDockControl;SaveDockedStarglobeWindowPos();");

    //Get the current window size
    print ("\nStarglobe Window Size: " 
              + `dockControl -q -width starglobeDockControl` 
              + " width " 
              + `dockControl -q -height starglobeDockControl` 
              + " height\n");
  }else{
     //Make the Maya 2010 or lower window a regular window type
    // showWindow $starglobeWindow;
    showWindow starglobeWin;
    
    //Get the current window size
    print ("\nStarglobe Window Size: "  
             + `window -q -width starglobeWin` 
             + " width " 
             + `window -q -height starglobeWin` 
             + " height\n"); 
  }
}

// Create the Starglobe + constraint
global proc doStarglobe(){
  string $starglobeName= "polyStarglobe";
  string $CameraName = `optionMenuGrp -query -value menuCameraSelect`;
  
  // Create the starglobe and get the starglobe object name
  python("import domeMaterial\nreload(domeMaterial)\ndomeMaterial.createStarglobe()");
  
  if($CameraName  != "Select a Camera..." ){
    // Check if the constraint object exists
    if(`objExists $starglobeName` ) {
      print ("Starglobe: " + $starglobeName + " created. The " + $CameraName + " was selected as the starglobe camera constraint.\n");
      //pointConstraint parentName childName;
      //pointConstraint -offset 0 0 0 -weight 1 `getObjectParentNode($CameraName)` $starglobeName;
      pointConstraint -offset 0 0 0 -weight 1 $CameraName $starglobeName;
    }else{ 
      print("Warning: The starglobe couldn't be found.\n"); 
    }
  }else{ 
    print ("Starglobe: " + $starglobeName + " created. No camera was selected for the starglobe constraint.\n"); 
  }

  //Regenerate the cameras popup menu
  buildCamerasMenu();
  
  //drop the selection
  select -cl;
}

// Find the object's child node
global proc string getObjectShapeNode ( string $object ) {
  string $shapes[] = `listRelatives -children -shapes $object`;
  return $shapes[0];
}

// Find the object's parent node
// Example: print `getObjectParentNode( "domeAFL_FOV_CameraShape2")`;
global proc string getObjectParentNode ( string $object ) {
  string $shapes[] = `listRelatives -parent -shapes $object`;
  return $shapes[0];
}


//run the tool
//createStarglobe();