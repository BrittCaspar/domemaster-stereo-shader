/*
  Version 1.8

  Procedure Name:
  AELatLong_StereoTemplate
  
  Description:
  Creates the attribute editor controls for the LatLong_Stereo shader
  
  Version History
  -----------------
  
  Version 1.7
  -------------
  2015-03-07 
  
  Version 1.6 alpha 9
  ------------------
  Dec 20, 2014
  
  Reordered GUI controls to put Camera Separation next to Zero Parallax Distance
  
  Updated the AE template to allow for a smaller Zero Parallax Distance value of 0.001 to allow for smaller camera scales.
  
  
  Version 1.6
  ----------------------
  2014-10-21 03.37 pm
  
  Updated AE template to match mr include file
  
  Version 1.6 Alpha 4
  ----------------------
  2014-10-03 09.29 pm
  
  Adding dynamic attributes and a help link
  Hiding Dome_Tilt_Compensation and Vertical_Mode attributes
  
  Version 1.6 Alpha 2
  ----------------------
  2014-09-19 03.14 pm

  UI Tweak

  Version 1.6 Alpha 1
  -----------------------
  2014-09-17 07.40 am
  Initial Release

  Author:
  Andrew Hazelden

  Contact:
  andrew@andrewhazelden.com
//
*/

//This creates the Parallax_Distance non mappable sliders in the attribute editor
global proc AELatLong_Stereo_Parallax_DistanceNew( string $attrName )
{
    floatSliderGrp
      -label "Zero Parallax Distance"
      -annotation "Zero Parallax Distance (focus plane)"
      -field true
      -maxValue 10000.0
      -minValue 0.001
      -value 360.0
      -fieldMinValue 0.001
      -fieldMaxValue 1000000.0
      LatLong_Stereo_Parallax_Distance;
	
	connectControl LatLong_Stereo_Parallax_Distance $attrName;
}


//This creates the Dome_Tilt non mappable sliders in the attribute editor
global proc AELatLong_Stereo_TiltNew( string $attrName )
{
	floatSliderGrp
    -label "Dome Forward Tilt"
    -annotation "Dome Forward Tilt"
    -field true
    -maxValue 90.0
    -minValue 0.0
    -value 0.0
    -fieldMinValue 0.0
    -fieldMaxValue 90.0
    -sliderStep 5
    LatLong_Stereo_Dome_Tilt;
	
	connectControl LatLong_Stereo_Dome_Tilt $attrName;	
}


//This creates the Cameras_Separation non mappable sliders in the attribute editor
global proc AELatLong_Stereo_SeparationNew( string $attrName )
{
	floatSliderGrp 
    -label "Cameras Separation" 
    -annotation "Cameras Separation" 
    -field true 
    -maxValue 100.0 
    -minValue 0.0 
    -value 6.5 
    -fieldMinValue 0
    -fieldMaxValue 1000000.0 
    LatLong_Stereo_Cameras_Separation;

	connectControl LatLong_Stereo_Cameras_Separation $attrName;	
}


//This creates the FOV_Vert_Angle non mappable sliders in the attribute editor
global proc AELatLong_Stereo_FOV_Vert_AngleNew( string $attrName )
{
	floatSliderGrp 
    -label "Field Of View (Vert)" 
    -annotation "Field of View Vertical (degrees)" 
    -field true 
    -maxValue 180
    -minValue 0.1 
    -value 180 
    -fieldMinValue 0.1
    -fieldMaxValue 180
    -sliderStep 5
    -precision 1
    LatLong_Stereo_FOV_Vert_Angle;

	connectControl LatLong_Stereo_FOV_Vert_Angle $attrName;	
}


//This creates the FOV_Horiz_Angle non mappable sliders in the attribute editor
global proc AELatLong_Stereo_FOV_Horiz_AngleNew( string $attrName )
{
	floatSliderGrp 
    -label "Field Of View (Horiz)" 
    -annotation "Field of View Horizontal (degrees)" 
    -field true 
    -maxValue 360
    -minValue 0.1 
    -value 360 
    -fieldMinValue 0.1
    -fieldMaxValue 360
    -sliderStep 5
    -precision 1
    LatLong_Stereo_FOV_Horiz_Angle;

	connectControl LatLong_Stereo_FOV_Horiz_Angle $attrName;	
}



//Replace an existing item
global proc AELatLong_Stereo_SeparationReplace( string $attrName )
{
  // Install connection between the floatSliderGrp and the Cameras_Separation attribute
	connectControl LatLong_Stereo_Cameras_Separation $attrName;
}


//Replace an existing item
global proc AELatLong_Stereo_Parallax_DistanceReplace( string $attrName )
{
  // Install connection between the floatSliderGrp and the Parallax_Distance attribute
	connectControl LatLong_Stereo_Parallax_Distance $attrName;
}


//Replace an existing item
global proc AELatLong_Stereo_TiltReplace( string $attrName )
{
  // Install connection between the floatSliderGrp and the Dome_Tilt attribute
	connectControl LatLong_Stereo_Dome_Tilt $attrName;
}


//Replace an existing item
global proc AELatLong_Stereo_FOV_Vert_AngleReplace( string $attrName )
{
  // Install connection between the floatSliderGrp and the FOV_Vert_Angle attribute
	connectControl LatLong_Stereo_FOV_Vert_Angle $attrName;
}

//Replace an existing item
global proc AELatLong_Stereo_FOV_Horiz_AngleReplace( string $attrName )
{
  // Install connection between the floatSliderGrp and the FOV_Horiz_Angle attribute
	connectControl LatLong_Stereo_FOV_Horiz_Angle $attrName;
}


//This creates the zeroParallaxDisplayMode menu in the attribute editor
global proc LatLong_Stereo_ZeroParallaxDisplayModeNew( string $attrName )
{
  string $menuName = "FOV Display Mode";
  
  //"Off:Wireframe:Shaded:Wireframe on Shaded"
	attrEnumOptionMenuGrp
    -label $menuName
    -attribute $attrName
    -enumeratedItem 0 "Off"
    -enumeratedItem 1 "Wireframe"
    -enumeratedItem 2 "Shaded"
    -enumeratedItem 3 "Wireframe on Shaded" 
    -annotation "Choose what shading mode should be used for the \"Parallax Distance\" geometry."
    LatLong_Stereo_ZeroParallaxDisplayMode;
}


//zeroParallaxDisplayMode
global proc LatLong_Stereo_ZeroParallaxDisplayModeReplace( string $attrName )
{
  // Install connection between the zero parallax display mode attribute and the options menu
  attrEnumOptionMenuGrp -edit -attribute $attrName LatLong_Stereo_ZeroParallaxDisplayMode;
}


//This creates the Double Sided Preview Shape checkbox in the attribute editor
global proc LatLong_Stereo_DoubleSidedPreviewShapeNew( string $attrName )
{

  string $menuName = "Double Sided Shading" ;
  // Double Sided Preview Shape Menu
  attrEnumOptionMenuGrp
    -label $menuName
    -attribute $attrName
    -enumeratedItem 0 "Double Sided"
    -enumeratedItem 1 "Show Backfaces"
    -enumeratedItem 2 "Show Frontfaces"
    -annotation 
    "Double Sided shading makes the inside and outside surfaces of the \"Parallax Distance\" visible. Setting the \nmode to show frontfaces or backfaces can make it easier to see through the shaded preview shape."
    LatLong_Stereo_DoubleSidedPreviewShape;
}


//Double Sided Preview Shape
global proc LatLong_Stereo_DoubleSidedPreviewShapeReplace( string $attrName )
{
  // Install connection between the doubleSidedPreviewShape attribute and the options Menu
 attrEnumOptionMenuGrp -edit -attribute $attrName LatLong_Stereo_DoubleSidedPreviewShape;
}


//---------------------------------------------------------------------------------
// New Dome Radius GUI Controls
//---------------------------------------------------------------------


//Return the name of the Node's Attr
global proc string dome_AEStripNodeName (string $nodeName)
{
	string $buffer[];
	tokenize $nodeName "." $buffer;
	return $buffer[1];
}


//Return the base name of the Node
global proc string dome_AEStripAttrName (string $nodeName)
{
	string $buffer[];
	tokenize $nodeName "." $buffer;
	return $buffer[0];
}


//Find the shape node
//example: print `getObjectShapeNode( "domeAFL_FOV_Camera1")`;
global proc string getObjectShapeNode ( string $object ) {
  string $shapes[] = `listRelatives -children -shapes $object`;
  return $shapes[0];
}


//Find the object's parent node
//example: print `getObjectParentNode( "domeAFL_FOV_CameraShape2")`;
global proc string getObjectParentNode ( string $object ) {
  string $shapes[] = `listRelatives -parent -shapes $object`;
  return $shapes[0];
}


//Create the field of view and parallax distance preview shape 
global proc AELatLong_Stereo_AddPreviewShape (string $nodeName)
{
  //separate the node name from the node.attribute name
  string $baseNodeName = dome_AEStripAttrName($nodeName);

 //string $baseNodeName = "LatLong_Stereo";
 //string $parentNodeName = getObjectParentNode($baseNodeName);
 //print($parentNodeName);
 
 //string $baseNodeName = "LatLong_Stereo";
 //string $list[] = `listConnections -s $baseNodeName`;

  //source "domeRadius.mel";
  //  //domeRadius("LatLong_Stereo");
  //domeRadius($baseNodeName);
  
  //Reselect the LatLong_Stereo node after creating the preview shape
  select -cl;
  select $baseNodeName;
}


//This creates the controls in the attribute editor
global proc LatLong_Stereo_AddDynamicAttrs( string $nodeName )
{
  //separate the node name from the node.attribute name
  string $baseNodeName = dome_AEStripAttrName($nodeName);
  
  int $NewDomeSetup = 0;
  
  //Add a version number attribute to the extra attribute fields
  string $attrName ="domeVersion";
  int $domeVersion = 1;
  if (!`attributeExists $attrName $baseNodeName`) {
    addAttr -ln $attrName -at long -min 0 $baseNodeName;
    setAttr ($baseNodeName+"."+$attrName) $domeVersion;
    print("Adding custom attribute " + $baseNodeName +"." +$attrName + "\n");
    
    $NewDomeSetup = 1;
    
    string $nodeType = "LatLong_Stereo";
    //Add the Attribute Editor node "help menu" link
    addAttributeEditorNodeHelp(
      $nodeType,
      "showHelp -absolute \"https://github.com/zicher3d-org/domemaster-stereo-shader/wiki/_pages\"");
  }
  
  //---------------------------------------------------------------------
  //Add Zero Parallax Controls
  //---------------------------------------------------------------------
  
  /*
  //Field of View Preview
  $attrName ="fovPreview";
  if (!`attributeExists $attrName $baseNodeName`) {
    addAttr -ln $attrName -nn "FOV Preview" -at bool -defaultValue true -keyable true $baseNodeName;
    print("Adding custom Attributes " + $baseNodeName +"." +$attrName + "\n");
  }
  */
  
  //Zero Parallax Display Mode
  // string $attrName ="zeroParallaxDisplayMode";
  // if (!`attributeExists $attrName $baseNodeName`) {
    // addAttr -ln $attrName  -at "enum" -en "Off:Wireframe:Shaded:Wireframe on Shaded" -defaultValue 1 -keyable true $baseNodeName;
    // print("Adding custom Attributes " + $baseNodeName +"." +$attrName + "\n");
  // }
  
  //Zero Parallax Color
  $attrName ="zeroParallaxColor";
  string $attrRName = "zeroParallaxColorR";
  string $attrGName = "zeroParallaxColorG";
  string $attrBName = "zeroParallaxColorB";

  if (!`attributeExists $attrName $baseNodeName`) {
    addAttr -ln $attrName -at float3 -uac -keyable true $baseNodeName;
    addAttr -ln $attrRName -at "float" -p $attrName -keyable true $baseNodeName;
    addAttr -ln $attrGName -at "float" -p $attrName -keyable true $baseNodeName;
    addAttr -ln $attrBName -at "float" -p $attrName -keyable true $baseNodeName;
    setAttr -type float3 ($baseNodeName+"."+$attrName) 0.911 0.252086 0.10932;
    print("Adding custom Attributes " + $baseNodeName +"." +$attrName + "\n");
  }

  //Zero Parallax Transparency
  $attrName ="zeroParallaxTransparency";
  if (!`attributeExists $attrName $baseNodeName`) {
  addAttr -ln "zeroParallaxTransparency" -at double  -min 0 -max 1 -defaultValue 0.25 -keyable true $baseNodeName;
  print("Adding custom Attributes " + $baseNodeName +"." +$attrName + "\n");
  }
  

   //Double Sided Rendering
  // $attrName ="doubleSidedShading";
  // if (!`attributeExists $attrName $baseNodeName`) {
    // addAttr -ln $attrName  -nn "Double Sided Shading" -at "enum" -en "Double Sided:Show Frontfaces:Show Backfaces" -min 0 -defaultValue 2 -keyable true $baseNodeName;
    // print("Adding custom Attributes " + $baseNodeName +"." +$attrName + "\n");
  // }
  
  //---------------------------------------------------------------------
  //Add Save Viewing Controls
  //---------------------------------------------------------------------
  
  //Safe Viewing Display Mode
  // $attrName ="safeViewingDisplayMode";
   // if (!`attributeExists $attrName $baseNodeName`) {
    // addAttr -ln $attrName -at "enum" -en "Off:Wireframe:Shaded:Wireframe on Shaded" -keyable true $baseNodeName;
    // print("Adding custom Attributes " + $baseNodeName +"." +$attrName + "\n");
  // }
  
  //Safe Viewing Color
  // $attrName ="safeViewingColor";
  // $attrRName = "safeViewingColorR";
  // $attrGName = "safeViewingColorG";
  // $attrBName = "safeViewingColorB";

  // if (!`attributeExists $attrName $baseNodeName`) {
    // addAttr -ln $attrName -at float3 -uac -keyable true $baseNodeName;
    // addAttr -ln $attrRName -at "float" -p $attrName -keyable true $baseNodeName;
    // addAttr -ln $attrGName -at "float" -p $attrName -keyable true $baseNodeName;
    // addAttr -ln $attrBName -at "float" -p $attrName -keyable true $baseNodeName;
    // setAttr -type float3 ($baseNodeName+"."+$attrName) 0.236 0.8080 1.0;
    // print("Adding custom Attributes " + $baseNodeName +"." +$attrName + "\n");
  // }
  
  //Safe Viewing Transparency
  // $attrName ="safeViewingTransparency";
  // if (!`attributeExists $attrName $baseNodeName`) {
  // addAttr -ln "safeViewingTransparency"  -at double  -min 0 -max 1 -dv 0.25 -keyable true $baseNodeName;
  // print("Adding custom Attributes " + $baseNodeName +"." +$attrName + "\n");
  // }

  //Safe Stereo Mode
  // $attrName ="safeStereo";
  // if (!`attributeExists $attrName $baseNodeName`) {
    // addAttr -ln $attrName -nn "Safe Stereo" -at bool -keyable true $baseNodeName;
    // print("Adding custom Attributes " + $baseNodeName +"." +$attrName + "\n");
  // }
  
  if($NewDomeSetup){
    //Add the dome preview shape to the camera via the connected lens shader
    AELatLong_Stereo_AddPreviewShape($baseNodeName);
  }  
}


//Create the attribute editor view for the LatLong_Stereo node
global proc AELatLong_StereoTemplate( string $nodeName )
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;

    editorTemplate -beginLayout "LatLong Stereo Shader" -collapse 0;
      editorTemplate 	-beginNoOptimize;
      
      editorTemplate -label "Camera" -annotation "Select the camera to render." -addControl "Camera";
      
      editorTemplate -callCustom 	"AELatLong_Stereo_FOV_Vert_AngleNew" "AELatLong_Stereo_FOV_Vert_AngleReplace" "FOV_Vert_Angle";

      editorTemplate -callCustom 	"AELatLong_Stereo_FOV_Horiz_AngleNew" "AELatLong_Stereo_FOV_Horiz_AngleReplace" "FOV_Horiz_Angle";
      
      editorTemplate -addSeparator;

      // Define custom non-mappable slider controls
      
      editorTemplate -callCustom 	"AELatLong_Stereo_SeparationNew" "AELatLong_Stereo_SeparationReplace" "Cameras_Separation";    
      
      editorTemplate -callCustom 	"AELatLong_Stereo_Parallax_DistanceNew" "AELatLong_Stereo_Parallax_DistanceReplace" "Parallax_Distance";   
      

      //editorTemplate -addSeparator;
       
      editorTemplate -label "Zenith Mode" -annotation "Switch the camera orientation from a horizontal to vertical mode." -addControl "Zenith_Mode";
      
      editorTemplate -endNoOptimize;
    editorTemplate -endLayout;
    
    //Define the Stereo Display Controls
    //editorTemplate -beginLayout "Stereo Display Controls" -collapse 0;
    editorTemplate -beginLayout "Stereo Display Controls" -collapse 1;
    editorTemplate 	-beginNoOptimize;
    
      //Add the custom dynamic attributes to the node
      editorTemplate -callCustom "LatLong_Stereo_AddDynamicAttrs" "LatLong_Stereo_AddDynamicAttrs" "zeroParallaxColor";  
    
      //editorTemplate -callCustom "LatLong_Stereo_ZeroParallaxDisplayModeNew" "LatLong_Stereo_ZeroParallaxDisplayModeReplace" "zeroParallaxDisplayMode"; 
      
      editorTemplate -label "Parallax Distance Color" -annotation  "This color picker controls the color of the \"Parallax Distance\" geometry." -addDynamicControl "zeroParallaxColor";
      
      editorTemplate -label "Parallax Distance Transp" -annotation  "Controls the transparency of the \"Parallax Distance\" geometry" -addDynamicControl "zeroParallaxTransparency";

      // editorTemplate -callCustom "LatLong_Stereo_DoubleSidedPreviewShapeNew" "LatLong_Stereo_DoubleSidedPreviewShapeReplace" "doubleSidedShading"; 
      
      //editorTemplate -addSeparator;	
      
      // editorTemplate -label "Safe Viewing Display Mode" -annotation  "Choose what shading mode should be used for the \"safe viewing volume\" geometry." -addDynamicControl "safeViewingDisplayMode";
      
      // editorTemplate -label "Safe Viewing Color" -annotation  "This color picker controls the color of the \"safe viewing volume\" geometry." -addDynamicControl "safeViewingColor";
      
      // editorTemplate -label "Safe Viewing Transparency" -annotation  "Controls the transparency of the \"safe viewing volume\" geometry" -addDynamicControl "safeViewingTransparency";  
      
      // editorTemplate -addSeparator;	
      
      // editorTemplate -label "Safe Stereo" -annotation  "This will enable the safe stereo mode." -addDynamicControl "safeStereo";
      
      editorTemplate -endNoOptimize;
    editorTemplate -endLayout;

    //Define the mappable attributes
    editorTemplate -beginLayout "Custom Maps" -collapse 0;
      editorTemplate -beginNoOptimize;
      
      editorTemplate -label "Separation Multiplier" -annotation "Cameras Separation Multiplier Map" -addControl "Cameras_Separation_Map"; 
      
      //editorTemplate -label "Head Tilt" -annotation "Head Tilt Map" -addControl "Head_Tilt_Map";
    
      editorTemplate -endNoOptimize;
    editorTemplate -endLayout;
    
    //Define the image orientation attributes
    editorTemplate -beginLayout "Image Orientation" -collapse 0;
      editorTemplate 	-beginNoOptimize;
      editorTemplate -label "Flip X" -annotation "Flips the image horizontally" -addControl "Flip_Ray_X";	
      editorTemplate -label "Flip Y" -annotation  "Flips the image vertically." -addControl "Flip_Ray_Y";
      editorTemplate -endNoOptimize;
    editorTemplate -endLayout;
    
    AEdependNodeTemplate $nodeName;
    
    //Hide the raw numerical camera and view offset fields
    editorTemplate -suppress "Camera";
    editorTemplate -suppress "View_Offset";
    editorTemplate -suppress "caching";
    editorTemplate -suppress "nodeState";
    editorTemplate -suppress "FOV_Vert_Angle";
    editorTemplate -suppress "FOV_Horiz_Angle";
    editorTemplate -suppress "Head_Tilt_Map";
    //editorTemplate -suppress "domeVersion";

    //Add any new controls that aren't listed above to the bottom of the attribute editor window 
    editorTemplate -addExtraControls;

  editorTemplate -endScrollLayout;
}